/*
 * Fitness Meetup
 *
 * The public API for the FitnessMeetup platform
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using FitnessMeetupApi.Service.Attributes;
using FitnessMeetupApi.Service.Models;
using FitnessMeetupApi.Persistence;
using Microsoft.AspNetCore.Authorization;

namespace FitnessMeetupApi.Service.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class UsersApiController : ControllerBase
    {
        private readonly IUsersRepository users;

        public UsersApiController(IUsersRepository users)
        {
            this.users = users;
        }

        /// <summary>
        /// Add a new user to the database.
        /// </summary>
        /// <param name="user">The user to be added with the unique id</param>
        /// <response code="204">Sucessfully created the user.</response>
        /// <response code="400">Invalid input</response>
        [HttpPost]
        [Route("/v1/users")]
        [ValidateModelState]
        [Authorize]
        public virtual IActionResult AddUser([FromBody]User user)
        {
            try
            {
                users.AddUser(user);
            }
            catch (ArgumentException e)
            {
                return new ObjectResult(e.Message);
            }
            return StatusCode(204);
        }

        /// <summary>
        /// Get the user by ID.
        /// </summary>
        /// <param name="id">The unique id of the user to retrieve.</param>
        /// <response code="200">Successfully retrived the user.</response>
        /// <response code="404">The requested user does not exist.</response>
        [HttpGet]
        [Route("/v1/users/{id}")]
        [ValidateModelState]
        public virtual IActionResult GetUser([FromRoute][Required]string id)
        {
            var user = users.GetUser(id);
            Console.WriteLine(user);
            if (user == null)
            {
                return NotFound();
            }

            return new ObjectResult(user);
        }
    }
}
